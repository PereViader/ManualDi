[  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_PublicExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.Public> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.Public> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.Public());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.Public> Default<T>(this Binding<T, SomeNamespace.Subnamespace.Public> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_InternalExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Internal> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.Internal> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.Internal());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Internal> Default<T>(this Binding<T, SomeNamespace.Subnamespace.Internal> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_InternalPrivateConstructorExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.InternalPrivateConstructor> Default<T>(this Binding<T, SomeNamespace.Subnamespace.InternalPrivateConstructor> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_PublicAndPrivateConstructorExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.PublicAndPrivateConstructor> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.PublicAndPrivateConstructor> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.PublicAndPrivateConstructor(
                    c.Resolve<int>()))
                .DependsOn(static d => {
                    d.ConstructorDependency<int>();
                });
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.PublicAndPrivateConstructor> Default<T>(this Binding<T, SomeNamespace.Subnamespace.PublicAndPrivateConstructor> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_Internal2Extensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Internal2> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.Internal2> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.Internal2());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Internal2> Default<T>(this Binding<T, SomeNamespace.Subnamespace.Internal2> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_InternalInitializeExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.InternalInitialize> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.InternalInitialize> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.InternalInitialize());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.InternalInitialize> Default<T>(this Binding<T, SomeNamespace.Subnamespace.InternalInitialize> binding)
        {
            return binding.Initialize(static o => ((SomeNamespace.Subnamespace.InternalInitialize)o).Initialize())
                .SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_SomeDisposableExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.SomeDisposable> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.SomeDisposable> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.SomeDisposable());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.SomeDisposable> Default<T>(this Binding<T, SomeNamespace.Subnamespace.SomeDisposable> binding)
        {
            return binding;
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_PublicInitializeExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.PublicInitialize> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.PublicInitialize> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.PublicInitialize());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.PublicInitialize> Default<T>(this Binding<T, SomeNamespace.Subnamespace.PublicInitialize> binding)
        {
            return binding.Inject(static (o, c) => 
                {
                    var to = (SomeNamespace.Subnamespace.PublicInitialize)o;
                    to.Inject();
                })
                .SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_StaticInitializeExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.StaticInitialize> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.StaticInitialize> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.StaticInitialize());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.StaticInitialize> Default<T>(this Binding<T, SomeNamespace.Subnamespace.StaticInitialize> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_InternalInjectExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.InternalInject> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.InternalInject> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.InternalInject());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.InternalInject> Default<T>(this Binding<T, SomeNamespace.Subnamespace.InternalInject> binding)
        {
            return binding.Inject(static (o, c) => 
                {
                    var to = (SomeNamespace.Subnamespace.InternalInject)o;
                    to.Inject();
                })
                .SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_PublicInjectExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.PublicInject> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.PublicInject> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.PublicInject());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.PublicInject> Default<T>(this Binding<T, SomeNamespace.Subnamespace.PublicInject> binding)
        {
            return binding.Inject(static (o, c) => 
                {
                    var to = (SomeNamespace.Subnamespace.PublicInject)o;
                    to.Inject();
                })
                .SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_StaticInjectExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.StaticInject> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.StaticInject> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.StaticInject());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.StaticInject> Default<T>(this Binding<T, SomeNamespace.Subnamespace.StaticInject> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_ConstructorWithGenericArgumentExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.ConstructorWithGenericArgument> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.ConstructorWithGenericArgument> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.ConstructorWithGenericArgument(
                    c.Resolve<System.Func<int>>()))
                .DependsOn(static d => {
                    d.ConstructorDependency<System.Func<int>>();
                });
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.ConstructorWithGenericArgument> Default<T>(this Binding<T, SomeNamespace.Subnamespace.ConstructorWithGenericArgument> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_InjectReferencePropertyClassExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.InjectReferencePropertyClass(
                    c.Resolve<object>()))
                .DependsOn(static d => {
                    d.ConstructorDependency<object>();
                });
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> Default<T>(this Binding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_InjectValueNullablePropertyClassExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.InjectValueNullablePropertyClass(
                    c.Resolve<int>(),
                    c.ResolveNullableValue<int>()))
                .DependsOn(static d => {
                    d.ConstructorDependency<int>();
                    d.NullableConstructorDependency<int>();
                });
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> Default<T>(this Binding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_ObsoleteExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [System.Obsolete]
internal static Binding<T, SomeNamespace.Subnamespace.Obsolete> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.Obsolete> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.Obsolete());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [System.Obsolete]
internal static Binding<T, SomeNamespace.Subnamespace.Obsolete> Default<T>(this Binding<T, SomeNamespace.Subnamespace.Obsolete> binding)
        {
            return binding.Initialize(static o => ((SomeNamespace.Subnamespace.Obsolete)o).Initialize())
                .Inject(static (o, c) => 
                {
                    var to = (SomeNamespace.Subnamespace.Obsolete)o;
                    to.Inject();
                })
                .SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_NullableDependencyExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.NullableDependency> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.NullableDependency> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.NullableDependency(
                    c.ResolveNullable<object>(),
                    c.ResolveNullableValue<int>()))
                .DependsOn(static d => {
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                });
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.NullableDependency> Default<T>(this Binding<T, SomeNamespace.Subnamespace.NullableDependency> binding)
        {
            return binding.Initialize(static o => ((SomeNamespace.Subnamespace.NullableDependency)o).Initialize())
                .Inject(static (o, c) => 
                {
                    var to = (SomeNamespace.Subnamespace.NullableDependency)o;
                    to.Inject(
                        c.ResolveNullable<object>(),
                        c.ResolveNullableValue<int>());
                })
                .DependsOn(static d => {
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                })
                .SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_Static_PublicNestedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Static.PublicNested> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.Static.PublicNested> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.Static.PublicNested());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Static.PublicNested> Default<T>(this Binding<T, SomeNamespace.Subnamespace.Static.PublicNested> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_Static_InternalNestedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Static.InternalNested> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.Static.InternalNested> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.Static.InternalNested());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Static.InternalNested> Default<T>(this Binding<T, SomeNamespace.Subnamespace.Static.InternalNested> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_ListInjectExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.ListInject> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.ListInject> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.ListInject(
                    c.ResolveAll<object>(),
                    c.ResolveAll<int>(),
                    c.ResolveAll<object>(),
                    c.ResolveAll<int>(),
                    c.ResolveAll<object>(),
                    c.ResolveAll<int>(),
                    c.ResolveAll<object>(),
                    c.ResolveAll<int>(),
                    c.ResolveAll<object>(),
                    c.ResolveAll<int>(),
                    c.ResolveAll<object>(),
                    c.ResolveAll<int>(),
                    c.ResolveAll<object>(static x => x.Id("A")),
                    c.ResolveAll<int>(static x => x.Id("A")),
                    c.ResolveAll<object>(static x => x.Id("A")),
                    c.ResolveAll<int>(static x => x.Id("A")),
                    c.ResolveAll<object>(static x => x.Id("A")),
                    c.ResolveAll<int>(static x => x.Id("A")),
                    c.ResolveAll<object>(static x => x.Id("A")),
                    c.ResolveAll<int>(static x => x.Id("A")),
                    c.ResolveAll<object>(static x => x.Id("A")),
                    c.ResolveAll<int>(static x => x.Id("A")),
                    c.ResolveAll<object>(static x => x.Id("A")),
                    c.ResolveAll<int>(static x => x.Id("A")),
                    c.WouldResolve<object>() ? c.ResolveAll<object>() : null,
                    c.WouldResolve<int>() ? c.ResolveAll<int>() : null,
                    c.WouldResolve<object>() ? c.ResolveAll<object>() : null,
                    c.WouldResolve<int>() ? c.ResolveAll<int>() : null,
                    c.WouldResolve<object>() ? c.ResolveAll<object>() : null,
                    c.WouldResolve<int>() ? c.ResolveAll<int>() : null,
                    c.WouldResolve<object>() ? c.ResolveAll<object>() : null,
                    c.WouldResolve<int>() ? c.ResolveAll<int>() : null,
                    c.WouldResolve<object>() ? c.ResolveAll<object>() : null,
                    c.WouldResolve<int>() ? c.ResolveAll<int>() : null,
                    c.WouldResolve<object>() ? c.ResolveAll<object>() : null,
                    c.WouldResolve<int>() ? c.ResolveAll<int>() : null,
                    c.WouldResolve<object>(static x => x.Id("A")) ? c.ResolveAll<object>(static x => x.Id("A")) : null,
                    c.WouldResolve<int>(static x => x.Id("A")) ? c.ResolveAll<int>(static x => x.Id("A")) : null,
                    c.WouldResolve<object>(static x => x.Id("A")) ? c.ResolveAll<object>(static x => x.Id("A")) : null,
                    c.WouldResolve<int>(static x => x.Id("A")) ? c.ResolveAll<int>(static x => x.Id("A")) : null,
                    c.WouldResolve<object>(static x => x.Id("A")) ? c.ResolveAll<object>(static x => x.Id("A")) : null,
                    c.WouldResolve<int>(static x => x.Id("A")) ? c.ResolveAll<int>(static x => x.Id("A")) : null,
                    c.WouldResolve<object>(static x => x.Id("A")) ? c.ResolveAll<object>(static x => x.Id("A")) : null,
                    c.WouldResolve<int>(static x => x.Id("A")) ? c.ResolveAll<int>(static x => x.Id("A")) : null,
                    c.WouldResolve<object>(static x => x.Id("A")) ? c.ResolveAll<object>(static x => x.Id("A")) : null,
                    c.WouldResolve<int>(static x => x.Id("A")) ? c.ResolveAll<int>(static x => x.Id("A")) : null,
                    c.WouldResolve<object>(static x => x.Id("A")) ? c.ResolveAll<object>(static x => x.Id("A")) : null,
                    c.WouldResolve<int>(static x => x.Id("A")) ? c.ResolveAll<int>(static x => x.Id("A")) : null,
                    c.WouldResolve<object>(static x => x.Id("A")) ? c.ResolveAll<object>(static x => x.Id("A")).ConvertAll<object?>(x => x) : null,
                    c.WouldResolve<int>(static x => x.Id("A")) ? c.ResolveAll<int>(static x => x.Id("A")).ConvertAll<int?>(x => x) : null,
                    c.WouldResolve<object>(static x => x.Id("A")) ? c.ResolveAll<object>(static x => x.Id("A")).ConvertAll<object?>(x => x) : null,
                    c.WouldResolve<int>(static x => x.Id("A")) ? c.ResolveAll<int>(static x => x.Id("A")).ConvertAll<int?>(x => x) : null,
                    c.WouldResolve<object>(static x => x.Id("A")) ? c.ResolveAll<object>(static x => x.Id("A")).ConvertAll<object?>(x => x) : null,
                    c.WouldResolve<int>(static x => x.Id("A")) ? c.ResolveAll<int>(static x => x.Id("A")).ConvertAll<int?>(x => x) : null,
                    c.WouldResolve<object>(static x => x.Id("A")) ? c.ResolveAll<object>(static x => x.Id("A")).ConvertAll<object?>(x => x) : null,
                    c.WouldResolve<int>(static x => x.Id("A")) ? c.ResolveAll<int>(static x => x.Id("A")).ConvertAll<int?>(x => x) : null,
                    c.WouldResolve<object>(static x => x.Id("A")) ? c.ResolveAll<object>(static x => x.Id("A")).ConvertAll<object?>(x => x) : null,
                    c.WouldResolve<int>(static x => x.Id("A")) ? c.ResolveAll<int>(static x => x.Id("A")).ConvertAll<int?>(x => x) : null,
                    c.WouldResolve<object>(static x => x.Id("A")) ? c.ResolveAll<object>(static x => x.Id("A")).ConvertAll<object?>(x => x) : null,
                    c.WouldResolve<int>(static x => x.Id("A")) ? c.ResolveAll<int>(static x => x.Id("A")).ConvertAll<int?>(x => x) : null))
                .DependsOn(static d => {
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                    d.NullableConstructorDependency<object>();
                    d.NullableConstructorDependency<int>();
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                    d.NullableConstructorDependency<object>(static x => x.Id("A"));
                    d.NullableConstructorDependency<int>(static x => x.Id("A"));
                });
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.ListInject> Default<T>(this Binding<T, SomeNamespace.Subnamespace.ListInject> binding)
        {
            return binding.Initialize(static o => ((SomeNamespace.Subnamespace.ListInject)o).Initialize())
                .Inject(static (o, c) => 
                {
                    var to = (SomeNamespace.Subnamespace.ListInject)o;
                    to.Inject(
                        c.ResolveAll<object>());
                })
                .DependsOn(static d => {
                    d.NullableConstructorDependency<object>();
                })
                .SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedSomeNamespace_Subnamespace_InjectIdAttributeExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.InjectIdAttribute> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.InjectIdAttribute> binding)
        {
            return binding
                .FromMethod(static c => new SomeNamespace.Subnamespace.InjectIdAttribute());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.InjectIdAttribute> Default<T>(this Binding<T, SomeNamespace.Subnamespace.InjectIdAttribute> binding)
        {
            return binding.Initialize(static o => ((SomeNamespace.Subnamespace.InjectIdAttribute)o).Initialize())
                .Inject(static (o, c) => 
                {
                    var to = (SomeNamespace.Subnamespace.InjectIdAttribute)o;
                    to.Inject(
                        c.Resolve<object>(static x => x.Id("Potato")),
                        c.Resolve<float>(static x => x.Id("Banana")),
                        c.Resolve<object>());
                })
                .DependsOn(static d => {
                    d.ConstructorDependency<object>(static x => x.Id("Potato"));
                    d.ConstructorDependency<float>(static x => x.Id("Banana"));
                    d.ConstructorDependency<object>();
                })
                .SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedMultipleOfEachExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, MultipleOfEach> FromConstructor<T>(this Binding<T, MultipleOfEach> binding)
        {
            return binding
                .FromMethod(static c => new MultipleOfEach(
                    c.Resolve<object>(),
                    c.Resolve<object>()))
                .DependsOn(static d => {
                    d.ConstructorDependency<object>();
                    d.ConstructorDependency<object>();
                });
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, MultipleOfEach> Default<T>(this Binding<T, MultipleOfEach> binding)
        {
            return binding.Initialize(static o => ((MultipleOfEach)o).Initialize())
                .Inject(static (o, c) => 
                {
                    var to = (MultipleOfEach)o;
                    to.Inject(
                        c.Resolve<object>());
                })
                .DependsOn(static d => {
                    d.ConstructorDependency<object>();
                })
                .SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedInjectContainerExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, InjectContainer> FromConstructor<T>(this Binding<T, InjectContainer> binding)
        {
            return binding
                .FromMethod(static c => new InjectContainer(
                    c,
                    c.CancellationToken))
                .DependsOn(static d => {
                    // Injected DiContainer
                    // Injected CancellationToken
                });
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, InjectContainer> Default<T>(this Binding<T, InjectContainer> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedInitializeAsyncCheckExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, InitializeAsyncCheck> FromConstructor<T>(this Binding<T, InitializeAsyncCheck> binding)
        {
            return binding
                .FromMethod(static c => new InitializeAsyncCheck());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, InitializeAsyncCheck> Default<T>(this Binding<T, InitializeAsyncCheck> binding)
        {
            return binding.InitializeAsync(static (o, ct) => ((InitializeAsyncCheck)o).InitializeAsync(ct))
                .SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedUnityEngine_ObjectExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, UnityEngine.Object> Default<T>(this Binding<T, UnityEngine.Object> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedUnityEngine_MonoBeheviourExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, UnityEngine.MonoBeheviour> Default<T>(this Binding<T, UnityEngine.MonoBeheviour> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedUnityEngine_SomeMonoBehaviourExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, UnityEngine.SomeMonoBehaviour> Default<T>(this Binding<T, UnityEngine.SomeMonoBehaviour> binding)
        {
            return binding.Initialize(static o => ((UnityEngine.SomeMonoBehaviour)o).Initialize())
                    .InitializeAsync(static (o, ct) => ((UnityEngine.SomeMonoBehaviour)o).InitializeAsync(ct))
                .Inject(static (o, c) => 
                {
                    var to = (UnityEngine.SomeMonoBehaviour)o;
                    to.Inject(
                        c.Resolve<object>(),
                        c.Resolve<int>());
                })
                .DependsOn(static d => {
                    d.ConstructorDependency<object>();
                    d.InjectionDependency<int>();
                })
                .SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedMapNavMeshExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, MapNavMesh> FromConstructor<T>(this Binding<T, MapNavMesh> binding)
        {
            return binding
                .FromMethod(static c => new MapNavMesh());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, MapNavMesh> Default<T>(this Binding<T, MapNavMesh> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedMapNavMesh_BakeDataExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, MapNavMesh.BakeData> FromConstructor<T>(this Binding<T, MapNavMesh.BakeData> binding)
        {
            return binding
                .FromMethod(static c => new MapNavMesh.BakeData());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, MapNavMesh.BakeData> Default<T>(this Binding<T, MapNavMesh.BakeData> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Async
{
    public static class ManualDiGeneratedMapNavMeshBakeDataExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [System.Obsolete]
public static Binding<T, MapNavMeshBakeData> FromConstructor<T>(this Binding<T, MapNavMeshBakeData> binding)
        {
            return binding
                .FromMethod(static c => new MapNavMeshBakeData());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [System.Obsolete]
public static Binding<T, MapNavMeshBakeData> Default<T>(this Binding<T, MapNavMeshBakeData> binding)
        {
            return binding.SkipDisposable();
        }
    }
}

]