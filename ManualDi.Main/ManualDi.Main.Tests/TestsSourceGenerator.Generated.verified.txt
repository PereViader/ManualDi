[  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, SomeNamespace.Subnamespace.Public> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Public> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.Public());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, SomeNamespace.Subnamespace.Public> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Public> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.Internal> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Internal> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.Internal());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.Internal> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Internal> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InternalPrivateConstructor> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InternalPrivateConstructor> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, SomeNamespace.Subnamespace.PublicAndPrivateConstructor> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.PublicAndPrivateConstructor> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.PublicAndPrivateConstructor(
                c.Resolve<int>()));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, SomeNamespace.Subnamespace.PublicAndPrivateConstructor> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.PublicAndPrivateConstructor> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.Internal2> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Internal2> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.Internal2());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.Internal2> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Internal2> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, SomeNamespace.Subnamespace.InternalInitialize> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InternalInitialize> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.InternalInitialize());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InternalInitialize> Initialize<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InternalInitialize> typeBinding)
        {
            return typeBinding.Initialize(static (o, c) => o.Initialize());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InternalInitialize> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InternalInitialize> typeBinding)
        {
            return typeBinding.Initialize();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, SomeNamespace.Subnamespace.PublicInitialize> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.PublicInitialize> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.PublicInitialize());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, SomeNamespace.Subnamespace.PublicInitialize> Initialize<T>(this TypeBinding<T, SomeNamespace.Subnamespace.PublicInitialize> typeBinding)
        {
            return typeBinding.Initialize(static (o, c) => o.Initialize());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.PublicInitialize> Inject<T>(this TypeBinding<T, SomeNamespace.Subnamespace.PublicInitialize> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Inject();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.PublicInitialize> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.PublicInitialize> typeBinding)
        {
            return typeBinding.Initialize().Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.StaticInitialize> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.StaticInitialize> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.StaticInitialize());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.StaticInitialize> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.StaticInitialize> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InternalInject> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InternalInject> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.InternalInject());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InternalInject> Inject<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InternalInject> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Inject();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InternalInject> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InternalInject> typeBinding)
        {
            return typeBinding.Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.PublicInject> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.PublicInject> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.PublicInject());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.PublicInject> Inject<T>(this TypeBinding<T, SomeNamespace.Subnamespace.PublicInject> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Inject();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.PublicInject> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.PublicInject> typeBinding)
        {
            return typeBinding.Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.StaticInject> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.StaticInject> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.StaticInject());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.StaticInject> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.StaticInject> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.ConstructorWithGenericArgument> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.ConstructorWithGenericArgument> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.ConstructorWithGenericArgument(
                c.Resolve<System.Func<int>>()));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.ConstructorWithGenericArgument> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.ConstructorWithGenericArgument> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InjectPropertyAndMethod> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InjectPropertyAndMethod> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.InjectPropertyAndMethod());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InjectPropertyAndMethod> Inject<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InjectPropertyAndMethod> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Object = c.Resolve<object>();
                o.Inject(
                    c.Resolve<object>());
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InjectPropertyAndMethod> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InjectPropertyAndMethod> typeBinding)
        {
            return typeBinding.Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.InjectReferencePropertyClass());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> Inject<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Object0 = c.Resolve<object>();
                o.Object2 = c.Resolve<object>();
                o.Object5 = c.Resolve<object>();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> typeBinding)
        {
            return typeBinding.Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.InjectValueNullablePropertyClass());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> Inject<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Int1 = c.Resolve<int>();
                o.Int2 = c.Resolve<int>();
                o.Int5 = c.ResolveNullableValue<int>();
                o.Int6 = c.ResolveNullableValue<int>();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> typeBinding)
        {
            return typeBinding.Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [System.Obsolete]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.Obsolete> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Obsolete> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.Obsolete());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [System.Obsolete]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.Obsolete> Initialize<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Obsolete> typeBinding)
        {
            return typeBinding.Initialize(static (o, c) => o.Initialize());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [System.Obsolete]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.Obsolete> Inject<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Obsolete> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Inject();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [System.Obsolete]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.Obsolete> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Obsolete> typeBinding)
        {
            return typeBinding.Initialize().Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, SomeNamespace.Subnamespace.NullableDependency> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.NullableDependency> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.NullableDependency(
                c.ResolveNullable<object>(),
                c.ResolveNullableValue<int>()));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, SomeNamespace.Subnamespace.NullableDependency> Initialize<T>(this TypeBinding<T, SomeNamespace.Subnamespace.NullableDependency> typeBinding)
        {
            return typeBinding.Initialize(static (o, c) => o.Initialize(
                c.ResolveNullable<object>(),
                c.ResolveNullableValue<int>()));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, SomeNamespace.Subnamespace.NullableDependency> Inject<T>(this TypeBinding<T, SomeNamespace.Subnamespace.NullableDependency> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Object = c.ResolveNullable<object>();
                o.Int = c.ResolveNullableValue<int>();
                o.Int3 = c.ResolveNullableValue<int>();
                o.Inject(
                    c.ResolveNullable<object>(),
                    c.ResolveNullableValue<int>());
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, SomeNamespace.Subnamespace.NullableDependency> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.NullableDependency> typeBinding)
        {
            return typeBinding.Initialize().Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.Static.PublicNested> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Static.PublicNested> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.Static.PublicNested());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.Static.PublicNested> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Static.PublicNested> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.Static.InternalNested> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Static.InternalNested> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.Static.InternalNested());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.Static.InternalNested> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.Static.InternalNested> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.ListInject> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.ListInject> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.ListInject(
                c.ResolveAll<object>()));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.ListInject> Initialize<T>(this TypeBinding<T, SomeNamespace.Subnamespace.ListInject> typeBinding)
        {
            return typeBinding.Initialize(static (o, c) => o.Initialize(
                c.ResolveAll<object>()));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.ListInject> Inject<T>(this TypeBinding<T, SomeNamespace.Subnamespace.ListInject> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.IEnumerableObject = c.ResolveAll<object>();
                o.IEnumerableInt = c.ResolveAll<int>();
                o.IReadOnlyListObject = c.ResolveAll<object>();
                o.IReadOnlyListInt = c.ResolveAll<int>();
                o.IListObject = c.ResolveAll<object>();
                o.IListInt = c.ResolveAll<int>();
                o.ListObject = c.ResolveAll<object>();
                o.ListInt = c.ResolveAll<int>();
                o.IReadOnlyCollectionObject = c.ResolveAll<object>();
                o.IReadOnlyCollectionInt = c.ResolveAll<int>();
                o.ICollectionObject = c.ResolveAll<object>();
                o.ICollectionInt = c.ResolveAll<int>();
                o.IEnumerableObjectId = c.ResolveAll<object>(x => x.Id("A"));
                o.IEnumerableIntId = c.ResolveAll<int>(x => x.Id("A"));
                o.IReadOnlyListObjectId = c.ResolveAll<object>(x => x.Id("A"));
                o.IReadOnlyListIntId = c.ResolveAll<int>(x => x.Id("A"));
                o.IListObjectId = c.ResolveAll<object>(x => x.Id("A"));
                o.IListIntId = c.ResolveAll<int>(x => x.Id("A"));
                o.ListObjectId = c.ResolveAll<object>(x => x.Id("A"));
                o.ListIntId = c.ResolveAll<int>(x => x.Id("A"));
                o.IReadOnlyCollectionObjectId = c.ResolveAll<object>(x => x.Id("A"));
                o.IReadOnlyCollectionIntId = c.ResolveAll<int>(x => x.Id("A"));
                o.ICollectionObjectId = c.ResolveAll<object>(x => x.Id("A"));
                o.ICollectionIntId = c.ResolveAll<int>(x => x.Id("A"));
                o.IEnumerableObjectNullable = c.WouldResolve<object>() ? c.ResolveAll<object>() : null;
                o.IEnumerableIntNullable = c.WouldResolve<int>() ? c.ResolveAll<int>() : null;
                o.IReadOnlyListObjectNullable = c.WouldResolve<object>() ? c.ResolveAll<object>() : null;
                o.IReadOnlyListIntNullable = c.WouldResolve<int>() ? c.ResolveAll<int>() : null;
                o.IListObjectNullable = c.WouldResolve<object>() ? c.ResolveAll<object>() : null;
                o.IListIntNullable = c.WouldResolve<int>() ? c.ResolveAll<int>() : null;
                o.ListObjectNullable = c.WouldResolve<object>() ? c.ResolveAll<object>() : null;
                o.ListIntNullable = c.WouldResolve<int>() ? c.ResolveAll<int>() : null;
                o.IReadOnlyCollectionObjectNullable = c.WouldResolve<object>() ? c.ResolveAll<object>() : null;
                o.IReadOnlyCollectionIntNullable = c.WouldResolve<int>() ? c.ResolveAll<int>() : null;
                o.ICollectionObjectNullable = c.WouldResolve<object>() ? c.ResolveAll<object>() : null;
                o.ICollectionIntNullable = c.WouldResolve<int>() ? c.ResolveAll<int>() : null;
                o.IEnumerableObjectNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")) : null;
                o.IEnumerableIntNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")) : null;
                o.IReadOnlyListObjectNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")) : null;
                o.IReadOnlyListIntNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")) : null;
                o.IListObjectNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")) : null;
                o.IListIntNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")) : null;
                o.ListObjectNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")) : null;
                o.ListIntNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")) : null;
                o.IReadOnlyCollectionObjectNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")) : null;
                o.IReadOnlyCollectionIntNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")) : null;
                o.ICollectionObjectNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")) : null;
                o.ICollectionIntNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")) : null;
                o.IEnumerableObjectNullableNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")).ConvertAll<object?>(x => x) : null;
                o.IEnumerableIntNullableNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")).ConvertAll<int?>(x => x) : null;
                o.IReadOnlyListObjectNullableNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")).ConvertAll<object?>(x => x) : null;
                o.IReadOnlyListIntNullableNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")).ConvertAll<int?>(x => x) : null;
                o.IListObjectNullableNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")).ConvertAll<object?>(x => x) : null;
                o.IListIntNullableNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")).ConvertAll<int?>(x => x) : null;
                o.ListObjectNullableNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")).ConvertAll<object?>(x => x) : null;
                o.ListIntNullableNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")).ConvertAll<int?>(x => x) : null;
                o.IReadOnlyCollectionObjectNullableNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")).ConvertAll<object?>(x => x) : null;
                o.IReadOnlyCollectionIntNullableNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")).ConvertAll<int?>(x => x) : null;
                o.ICollectionObjectNullableNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")).ConvertAll<object?>(x => x) : null;
                o.ICollectionIntNullableNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")).ConvertAll<int?>(x => x) : null;
                o.Inject(
                    c.ResolveAll<object>());
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.ListInject> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.ListInject> typeBinding)
        {
            return typeBinding.Initialize().Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.LazyDependencies> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.LazyDependencies> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.LazyDependencies());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.LazyDependencies> Inject<T>(this TypeBinding<T, SomeNamespace.Subnamespace.LazyDependencies> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Object = new System.Lazy<object>(() => c.Resolve<object>());
                o.NullableObject = new System.Lazy<object?>(() => c.ResolveNullable<object>());
                o.Value = new System.Lazy<int>(() => c.Resolve<int>());
                o.NullableValue = new System.Lazy<int?>(() => c.ResolveNullableValue<int>());
                o.RecursiveLazy = new System.Lazy<System.Lazy<System.Lazy<int>>>(() => new System.Lazy<System.Lazy<int>>(() => new System.Lazy<int>(() => c.Resolve<int>())));
                o.LazyList = new System.Lazy<System.Collections.Generic.List<int>>(() => c.ResolveAll<int>());
                o.ObjectNullable = c.WouldResolve<object>() ? new System.Lazy<object>(() => c.Resolve<object>()) : null;
                o.NullableObjectNullable = c.WouldResolve<object>() ? new System.Lazy<object?>(() => c.ResolveNullable<object>()) : null;
                o.ValueNullable = c.WouldResolve<int>() ? new System.Lazy<int>(() => c.Resolve<int>()) : null;
                o.NullableValueNullable = c.WouldResolve<int>() ? new System.Lazy<int?>(() => c.ResolveNullableValue<int>()) : null;
                o.RecursiveLazyNullable = c.WouldResolve<System.Lazy<System.Lazy<int>>>() ? new System.Lazy<System.Lazy<System.Lazy<int>>>(() => new System.Lazy<System.Lazy<int>>(() => new System.Lazy<int>(() => c.Resolve<int>()))) : null;
                o.LazyListNullable = c.WouldResolve<System.Collections.Generic.List<int>>() ? new System.Lazy<System.Collections.Generic.List<int>>(() => c.ResolveAll<int>()) : null;
                o.Inject(
                    new System.Lazy<object>(() => c.Resolve<object>()),
                    new System.Lazy<object?>(() => c.ResolveNullable<object>()),
                    new System.Lazy<int>(() => c.Resolve<int>()),
                    new System.Lazy<int?>(() => c.ResolveNullableValue<int>()));
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.LazyDependencies> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.LazyDependencies> typeBinding)
        {
            return typeBinding.Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InjectIdAttribute> FromConstructor<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InjectIdAttribute> typeBinding)
        {
            return typeBinding.FromMethod(static c => new SomeNamespace.Subnamespace.InjectIdAttribute());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InjectIdAttribute> Initialize<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InjectIdAttribute> typeBinding)
        {
            return typeBinding.Initialize(static (o, c) => o.Initialize(
                c.Resolve<object>(x => x.Id("Potato")),
                c.Resolve<float>(x => x.Id("Banana")),
                c.Resolve<object>()));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InjectIdAttribute> Inject<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InjectIdAttribute> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.HelloIdValue = c.Resolve<int>(x => x.Id("A"));
                o.LazyInt = new System.Lazy<int>(() => c.Resolve<int>(x => x.Id("A")));
                o.Inject(
                    c.Resolve<object>(x => x.Id("Potato")),
                    c.Resolve<float>(x => x.Id("Banana")),
                    new System.Lazy<int>(() => c.Resolve<int>(x => x.Id("P"))),
                    c.Resolve<object>());
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, SomeNamespace.Subnamespace.InjectIdAttribute> Default<T>(this TypeBinding<T, SomeNamespace.Subnamespace.InjectIdAttribute> typeBinding)
        {
            return typeBinding.Initialize().Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, UnityEngine.Object> Default<T>(this TypeBinding<T, UnityEngine.Object> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, UnityEngine.MonoBeheviour> Initialize<T>(this TypeBinding<T, UnityEngine.MonoBeheviour> typeBinding)
        {
            return typeBinding.Initialize(static (o, c) => o.Initialize());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, UnityEngine.MonoBeheviour> Inject<T>(this TypeBinding<T, UnityEngine.MonoBeheviour> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Something = c.Resolve<object>();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, UnityEngine.MonoBeheviour> Default<T>(this TypeBinding<T, UnityEngine.MonoBeheviour> typeBinding)
        {
            return typeBinding.Initialize().Inject();
        }
    }
}

]