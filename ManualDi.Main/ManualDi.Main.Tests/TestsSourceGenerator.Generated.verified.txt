[  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, Public> FromConstructor<T>(this TypeBinding<T, Public> typeBinding)
        {
            return typeBinding.FromMethod(static c => new Public());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, Public> Default<T>(this TypeBinding<T, Public> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, Internal> FromConstructor<T>(this TypeBinding<T, Internal> typeBinding)
        {
            return typeBinding.FromMethod(static c => new Internal());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, Internal> Default<T>(this TypeBinding<T, Internal> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, InternalPrivateConstructor> Default<T>(this TypeBinding<T, InternalPrivateConstructor> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, PublicAndPrivateConstructor> FromConstructor<T>(this TypeBinding<T, PublicAndPrivateConstructor> typeBinding)
        {
            return typeBinding.FromMethod(static c => new PublicAndPrivateConstructor(c.Resolve<int>()));
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, PublicAndPrivateConstructor> Default<T>(this TypeBinding<T, PublicAndPrivateConstructor> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, Internal2> FromConstructor<T>(this TypeBinding<T, Internal2> typeBinding)
        {
            return typeBinding.FromMethod(static c => new Internal2());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, Internal2> Default<T>(this TypeBinding<T, Internal2> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, InternalInitialize> FromConstructor<T>(this TypeBinding<T, InternalInitialize> typeBinding)
        {
            return typeBinding.FromMethod(static c => new InternalInitialize());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, InternalInitialize> Initialize<T>(this TypeBinding<T, InternalInitialize> typeBinding)
        {
            return typeBinding.Initialize(static (o, c) => o.Initialize());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, InternalInitialize> Default<T>(this TypeBinding<T, InternalInitialize> typeBinding)
        {
            return typeBinding.Initialize();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, PublicInitialize> FromConstructor<T>(this TypeBinding<T, PublicInitialize> typeBinding)
        {
            return typeBinding.FromMethod(static c => new PublicInitialize());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, PublicInitialize> Initialize<T>(this TypeBinding<T, PublicInitialize> typeBinding)
        {
            return typeBinding.Initialize(static (o, c) => o.Initialize());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, PublicInitialize> Inject<T>(this TypeBinding<T, PublicInitialize> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Inject();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, PublicInitialize> Default<T>(this TypeBinding<T, PublicInitialize> typeBinding)
        {
            return typeBinding.Initialize().Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, StaticInitialize> FromConstructor<T>(this TypeBinding<T, StaticInitialize> typeBinding)
        {
            return typeBinding.FromMethod(static c => new StaticInitialize());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, StaticInitialize> Default<T>(this TypeBinding<T, StaticInitialize> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, InternalInject> FromConstructor<T>(this TypeBinding<T, InternalInject> typeBinding)
        {
            return typeBinding.FromMethod(static c => new InternalInject());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, InternalInject> Inject<T>(this TypeBinding<T, InternalInject> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Inject();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, InternalInject> Default<T>(this TypeBinding<T, InternalInject> typeBinding)
        {
            return typeBinding.Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, PublicInject> FromConstructor<T>(this TypeBinding<T, PublicInject> typeBinding)
        {
            return typeBinding.FromMethod(static c => new PublicInject());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, PublicInject> Inject<T>(this TypeBinding<T, PublicInject> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Inject();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, PublicInject> Default<T>(this TypeBinding<T, PublicInject> typeBinding)
        {
            return typeBinding.Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, StaticInject> FromConstructor<T>(this TypeBinding<T, StaticInject> typeBinding)
        {
            return typeBinding.FromMethod(static c => new StaticInject());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, StaticInject> Default<T>(this TypeBinding<T, StaticInject> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, ConstructorWithGenericArgument> FromConstructor<T>(this TypeBinding<T, ConstructorWithGenericArgument> typeBinding)
        {
            return typeBinding.FromMethod(static c => new ConstructorWithGenericArgument(c.Resolve<Func<int>>()));
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, ConstructorWithGenericArgument> Default<T>(this TypeBinding<T, ConstructorWithGenericArgument> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, InjectPropertyAndMethod> FromConstructor<T>(this TypeBinding<T, InjectPropertyAndMethod> typeBinding)
        {
            return typeBinding.FromMethod(static c => new InjectPropertyAndMethod());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, InjectPropertyAndMethod> Inject<T>(this TypeBinding<T, InjectPropertyAndMethod> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Object = c.Resolve<object>();
                o.Inject(c.Resolve<object>());
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, InjectPropertyAndMethod> Default<T>(this TypeBinding<T, InjectPropertyAndMethod> typeBinding)
        {
            return typeBinding.Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, InjectReferencePropertyClass> FromConstructor<T>(this TypeBinding<T, InjectReferencePropertyClass> typeBinding)
        {
            return typeBinding.FromMethod(static c => new InjectReferencePropertyClass());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, InjectReferencePropertyClass> Inject<T>(this TypeBinding<T, InjectReferencePropertyClass> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Object0 = c.Resolve<object>();
                o.Object2 = c.Resolve<object>();
                o.Object5 = c.Resolve<object>();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, InjectReferencePropertyClass> Default<T>(this TypeBinding<T, InjectReferencePropertyClass> typeBinding)
        {
            return typeBinding.Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, InjectValueNullablePropertyClass> FromConstructor<T>(this TypeBinding<T, InjectValueNullablePropertyClass> typeBinding)
        {
            return typeBinding.FromMethod(static c => new InjectValueNullablePropertyClass());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, InjectValueNullablePropertyClass> Inject<T>(this TypeBinding<T, InjectValueNullablePropertyClass> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Int1 = c.Resolve<int>();
                o.Int2 = c.Resolve<int>();
                o.Int5 = c.ResolveNullableValue<int>();
                o.Int6 = c.ResolveNullableValue<int>();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, InjectValueNullablePropertyClass> Default<T>(this TypeBinding<T, InjectValueNullablePropertyClass> typeBinding)
        {
            return typeBinding.Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, Obsolete> FromConstructor<T>(this TypeBinding<T, Obsolete> typeBinding)
        {
            return typeBinding.FromMethod(static c => new Obsolete());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, Obsolete> Initialize<T>(this TypeBinding<T, Obsolete> typeBinding)
        {
            return typeBinding.Initialize(static (o, c) => o.Initialize());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, Obsolete> Inject<T>(this TypeBinding<T, Obsolete> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Inject();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, Obsolete> Default<T>(this TypeBinding<T, Obsolete> typeBinding)
        {
            return typeBinding.Initialize().Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, NullableDependency> FromConstructor<T>(this TypeBinding<T, NullableDependency> typeBinding)
        {
            return typeBinding.FromMethod(static c => new NullableDependency(c.ResolveNullable<object>(),
                c.Resolve<Nullable<int>>()));
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, NullableDependency> Initialize<T>(this TypeBinding<T, NullableDependency> typeBinding)
        {
            return typeBinding.Initialize(static (o, c) => o.Initialize(c.ResolveNullable<object>(),
                c.ResolveNullableValue<int>()));
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, NullableDependency> Inject<T>(this TypeBinding<T, NullableDependency> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Object = c.ResolveNullable<object>();
                o.Int = c.ResolveNullableValue<int>();
                o.Int3 = c.Resolve<Nullable<int>>();
                o.Inject(c.ResolveNullable<object>(),
                c.ResolveNullableValue<int>());
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, NullableDependency> Default<T>(this TypeBinding<T, NullableDependency> typeBinding)
        {
            return typeBinding.Initialize().Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, Static.PublicNested> FromConstructor<T>(this TypeBinding<T, Static.PublicNested> typeBinding)
        {
            return typeBinding.FromMethod(static c => new Static.PublicNested());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, Static.PublicNested> Default<T>(this TypeBinding<T, Static.PublicNested> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, Static.InternalNested> FromConstructor<T>(this TypeBinding<T, Static.InternalNested> typeBinding)
        {
            return typeBinding.FromMethod(static c => new Static.InternalNested());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, Static.InternalNested> Default<T>(this TypeBinding<T, Static.InternalNested> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, ListInject> FromConstructor<T>(this TypeBinding<T, ListInject> typeBinding)
        {
            return typeBinding.FromMethod(static c => new ListInject(c.Resolve<List<object>>()));
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, ListInject> Initialize<T>(this TypeBinding<T, ListInject> typeBinding)
        {
            return typeBinding.Initialize(static (o, c) => o.Initialize(c.Resolve<List<object>>()));
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, ListInject> Inject<T>(this TypeBinding<T, ListInject> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.IEnumerableObject = c.Resolve<IEnumerable<object>>();
                o.IEnumerableInt = c.Resolve<IEnumerable<int>>();
                o.IReadOnlyListObject = c.Resolve<IReadOnlyList<object>>();
                o.IReadOnlyListInt = c.Resolve<IReadOnlyList<int>>();
                o.IListObject = c.Resolve<IList<object>>();
                o.IListInt = c.Resolve<IList<int>>();
                o.ListObject = c.Resolve<List<object>>();
                o.ListInt = c.Resolve<List<int>>();
                o.Inject(c.Resolve<List<object>>());
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, ListInject> Default<T>(this TypeBinding<T, ListInject> typeBinding)
        {
            return typeBinding.Initialize().Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, LazyDependencies> FromConstructor<T>(this TypeBinding<T, LazyDependencies> typeBinding)
        {
            return typeBinding.FromMethod(static c => new LazyDependencies());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, LazyDependencies> Inject<T>(this TypeBinding<T, LazyDependencies> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Object = c.Resolve<Lazy<object>>();
                o.NullableObject = c.Resolve<Lazy<object?>>();
                o.Value = c.Resolve<Lazy<int>>();
                o.NullableValue = c.Resolve<Lazy<int?>>();
                o.Inject(c.Resolve<Lazy<object>>(),
                c.Resolve<Lazy<object?>>(),
                c.Resolve<Lazy<int>>(),
                c.Resolve<Lazy<int?>>());
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static TypeBinding<T, LazyDependencies> Default<T>(this TypeBinding<T, LazyDependencies> typeBinding)
        {
            return typeBinding.Inject();
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, UnityEngine.Object> Default<T>(this TypeBinding<T, UnityEngine.Object> typeBinding)
        {
            return typeBinding;
        }
    }
}

  
using System.Runtime.CompilerServices;

namespace ManualDi.Main
{
    public static partial class ManualDiGeneratedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, UnityEngine.MonoBeheviour> Initialize<T>(this TypeBinding<T, UnityEngine.MonoBeheviour> typeBinding)
        {
            return typeBinding.Initialize(static (o, c) => o.Initialize());
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, UnityEngine.MonoBeheviour> Inject<T>(this TypeBinding<T, UnityEngine.MonoBeheviour> typeBinding)
        {
            return typeBinding.Inject(static (o, c) => 
            {
                o.Something = c.Resolve<UnityEngine.Object>();
            });
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TypeBinding<T, UnityEngine.MonoBeheviour> Default<T>(this TypeBinding<T, UnityEngine.MonoBeheviour> typeBinding)
        {
            return typeBinding.Initialize().Inject();
        }
    }
}

]