[  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespacePublicExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.Public> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.Public> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.Public());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.Public> Default<T>(this Binding<T, SomeNamespace.Subnamespace.Public> binding)
        {
            return binding.DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceInternalExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Internal> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.Internal> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.Internal());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Internal> Default<T>(this Binding<T, SomeNamespace.Subnamespace.Internal> binding)
        {
            return binding.DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceInternalPrivateConstructorExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.InternalPrivateConstructor> Default<T>(this Binding<T, SomeNamespace.Subnamespace.InternalPrivateConstructor> binding)
        {
            return binding.DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespacePublicAndPrivateConstructorExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.PublicAndPrivateConstructor> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.PublicAndPrivateConstructor> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.PublicAndPrivateConstructor(
                c.Resolve<int>()));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.PublicAndPrivateConstructor> Default<T>(this Binding<T, SomeNamespace.Subnamespace.PublicAndPrivateConstructor> binding)
        {
            return binding.DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceInternal2Extensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Internal2> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.Internal2> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.Internal2());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Internal2> Default<T>(this Binding<T, SomeNamespace.Subnamespace.Internal2> binding)
        {
            return binding.DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceInternalInitializeExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.InternalInitialize> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.InternalInitialize> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.InternalInitialize());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.InternalInitialize> Default<T>(this Binding<T, SomeNamespace.Subnamespace.InternalInitialize> binding)
        {
            return binding.Initialize(static (o, c) => o.Initialize())
                .DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceSomeDisposableExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.SomeDisposable> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.SomeDisposable> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.SomeDisposable());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.SomeDisposable> Default<T>(this Binding<T, SomeNamespace.Subnamespace.SomeDisposable> binding)
        {
            return binding;
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespacePublicInitializeExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.PublicInitialize> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.PublicInitialize> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.PublicInitialize());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.PublicInitialize> Default<T>(this Binding<T, SomeNamespace.Subnamespace.PublicInitialize> binding)
        {
            return binding.Initialize(static (o, c) => o.Initialize())
                .Inject(static (o, c) => 
                {
                    o.Inject();
                })
                .DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceStaticInitializeExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.StaticInitialize> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.StaticInitialize> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.StaticInitialize());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.StaticInitialize> Default<T>(this Binding<T, SomeNamespace.Subnamespace.StaticInitialize> binding)
        {
            return binding.DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceInternalInjectExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.InternalInject> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.InternalInject> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.InternalInject());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.InternalInject> Default<T>(this Binding<T, SomeNamespace.Subnamespace.InternalInject> binding)
        {
            return binding.Inject(static (o, c) => 
                {
                    o.Inject();
                })
                .DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespacePublicInjectExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.PublicInject> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.PublicInject> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.PublicInject());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.PublicInject> Default<T>(this Binding<T, SomeNamespace.Subnamespace.PublicInject> binding)
        {
            return binding.Inject(static (o, c) => 
                {
                    o.Inject();
                })
                .DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceStaticInjectExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.StaticInject> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.StaticInject> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.StaticInject());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.StaticInject> Default<T>(this Binding<T, SomeNamespace.Subnamespace.StaticInject> binding)
        {
            return binding.DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceConstructorWithGenericArgumentExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.ConstructorWithGenericArgument> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.ConstructorWithGenericArgument> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.ConstructorWithGenericArgument(
                c.Resolve<System.Func<int>>()));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.ConstructorWithGenericArgument> Default<T>(this Binding<T, SomeNamespace.Subnamespace.ConstructorWithGenericArgument> binding)
        {
            return binding.DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceInjectPropertyAndMethodExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.InjectPropertyAndMethod> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.InjectPropertyAndMethod> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.InjectPropertyAndMethod());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.InjectPropertyAndMethod> Default<T>(this Binding<T, SomeNamespace.Subnamespace.InjectPropertyAndMethod> binding)
        {
            return binding.Inject(static (o, c) => 
                {
                    o.Object = c.Resolve<object>();
                    o.Inject(
                        c.Resolve<object>());
                })
                .DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceInjectReferencePropertyClassExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.InjectReferencePropertyClass());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> Default<T>(this Binding<T, SomeNamespace.Subnamespace.InjectReferencePropertyClass> binding)
        {
            return binding.Inject(static (o, c) => 
                {
                    o.Object0 = c.Resolve<object>();
                    o.Object2 = c.Resolve<object>();
                    o.Object5 = c.Resolve<object>();
                })
                .DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceInjectValueNullablePropertyClassExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.InjectValueNullablePropertyClass());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> Default<T>(this Binding<T, SomeNamespace.Subnamespace.InjectValueNullablePropertyClass> binding)
        {
            return binding.Inject(static (o, c) => 
                {
                    o.Int1 = c.Resolve<int>();
                    o.Int2 = c.Resolve<int>();
                    o.Int5 = c.ResolveNullableValue<int>();
                    o.Int6 = c.ResolveNullableValue<int>();
                })
                .DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceObsoleteExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [System.Obsolete]
internal static Binding<T, SomeNamespace.Subnamespace.Obsolete> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.Obsolete> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.Obsolete());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [System.Obsolete]
internal static Binding<T, SomeNamespace.Subnamespace.Obsolete> Default<T>(this Binding<T, SomeNamespace.Subnamespace.Obsolete> binding)
        {
            return binding.Initialize(static (o, c) => o.Initialize())
                .Inject(static (o, c) => 
                {
                    o.Inject();
                })
                .DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceNullableDependencyExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.NullableDependency> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.NullableDependency> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.NullableDependency(
                c.ResolveNullable<object>(),
                c.ResolveNullableValue<int>()));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, SomeNamespace.Subnamespace.NullableDependency> Default<T>(this Binding<T, SomeNamespace.Subnamespace.NullableDependency> binding)
        {
            return binding.Initialize(static (o, c) => o.Initialize())
                .Inject(static (o, c) => 
                {
                    o.Object = c.ResolveNullable<object>();
                    o.Int = c.ResolveNullableValue<int>();
                    o.Int3 = c.ResolveNullableValue<int>();
                    o.Inject(
                        c.ResolveNullable<object>(),
                        c.ResolveNullableValue<int>());
                })
                .DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceStaticPublicNestedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Static.PublicNested> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.Static.PublicNested> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.Static.PublicNested());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Static.PublicNested> Default<T>(this Binding<T, SomeNamespace.Subnamespace.Static.PublicNested> binding)
        {
            return binding.DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceStaticInternalNestedExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Static.InternalNested> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.Static.InternalNested> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.Static.InternalNested());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.Static.InternalNested> Default<T>(this Binding<T, SomeNamespace.Subnamespace.Static.InternalNested> binding)
        {
            return binding.DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceListInjectExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.ListInject> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.ListInject> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.ListInject(
                c.ResolveAll<object>()));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.ListInject> Default<T>(this Binding<T, SomeNamespace.Subnamespace.ListInject> binding)
        {
            return binding.Initialize(static (o, c) => o.Initialize())
                .Inject(static (o, c) => 
                {
                    o.IEnumerableObject = c.ResolveAll<object>();
                    o.IEnumerableInt = c.ResolveAll<int>();
                    o.IReadOnlyListObject = c.ResolveAll<object>();
                    o.IReadOnlyListInt = c.ResolveAll<int>();
                    o.IListObject = c.ResolveAll<object>();
                    o.IListInt = c.ResolveAll<int>();
                    o.ListObject = c.ResolveAll<object>();
                    o.ListInt = c.ResolveAll<int>();
                    o.IReadOnlyCollectionObject = c.ResolveAll<object>();
                    o.IReadOnlyCollectionInt = c.ResolveAll<int>();
                    o.ICollectionObject = c.ResolveAll<object>();
                    o.ICollectionInt = c.ResolveAll<int>();
                    o.IEnumerableObjectId = c.ResolveAll<object>(x => x.Id("A"));
                    o.IEnumerableIntId = c.ResolveAll<int>(x => x.Id("A"));
                    o.IReadOnlyListObjectId = c.ResolveAll<object>(x => x.Id("A"));
                    o.IReadOnlyListIntId = c.ResolveAll<int>(x => x.Id("A"));
                    o.IListObjectId = c.ResolveAll<object>(x => x.Id("A"));
                    o.IListIntId = c.ResolveAll<int>(x => x.Id("A"));
                    o.ListObjectId = c.ResolveAll<object>(x => x.Id("A"));
                    o.ListIntId = c.ResolveAll<int>(x => x.Id("A"));
                    o.IReadOnlyCollectionObjectId = c.ResolveAll<object>(x => x.Id("A"));
                    o.IReadOnlyCollectionIntId = c.ResolveAll<int>(x => x.Id("A"));
                    o.ICollectionObjectId = c.ResolveAll<object>(x => x.Id("A"));
                    o.ICollectionIntId = c.ResolveAll<int>(x => x.Id("A"));
                    o.IEnumerableObjectNullable = c.WouldResolve<object>() ? c.ResolveAll<object>() : null;
                    o.IEnumerableIntNullable = c.WouldResolve<int>() ? c.ResolveAll<int>() : null;
                    o.IReadOnlyListObjectNullable = c.WouldResolve<object>() ? c.ResolveAll<object>() : null;
                    o.IReadOnlyListIntNullable = c.WouldResolve<int>() ? c.ResolveAll<int>() : null;
                    o.IListObjectNullable = c.WouldResolve<object>() ? c.ResolveAll<object>() : null;
                    o.IListIntNullable = c.WouldResolve<int>() ? c.ResolveAll<int>() : null;
                    o.ListObjectNullable = c.WouldResolve<object>() ? c.ResolveAll<object>() : null;
                    o.ListIntNullable = c.WouldResolve<int>() ? c.ResolveAll<int>() : null;
                    o.IReadOnlyCollectionObjectNullable = c.WouldResolve<object>() ? c.ResolveAll<object>() : null;
                    o.IReadOnlyCollectionIntNullable = c.WouldResolve<int>() ? c.ResolveAll<int>() : null;
                    o.ICollectionObjectNullable = c.WouldResolve<object>() ? c.ResolveAll<object>() : null;
                    o.ICollectionIntNullable = c.WouldResolve<int>() ? c.ResolveAll<int>() : null;
                    o.IEnumerableObjectNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")) : null;
                    o.IEnumerableIntNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")) : null;
                    o.IReadOnlyListObjectNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")) : null;
                    o.IReadOnlyListIntNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")) : null;
                    o.IListObjectNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")) : null;
                    o.IListIntNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")) : null;
                    o.ListObjectNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")) : null;
                    o.ListIntNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")) : null;
                    o.IReadOnlyCollectionObjectNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")) : null;
                    o.IReadOnlyCollectionIntNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")) : null;
                    o.ICollectionObjectNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")) : null;
                    o.ICollectionIntNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")) : null;
                    o.IEnumerableObjectNullableNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")).ConvertAll<object?>(x => x) : null;
                    o.IEnumerableIntNullableNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")).ConvertAll<int?>(x => x) : null;
                    o.IReadOnlyListObjectNullableNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")).ConvertAll<object?>(x => x) : null;
                    o.IReadOnlyListIntNullableNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")).ConvertAll<int?>(x => x) : null;
                    o.IListObjectNullableNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")).ConvertAll<object?>(x => x) : null;
                    o.IListIntNullableNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")).ConvertAll<int?>(x => x) : null;
                    o.ListObjectNullableNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")).ConvertAll<object?>(x => x) : null;
                    o.ListIntNullableNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")).ConvertAll<int?>(x => x) : null;
                    o.IReadOnlyCollectionObjectNullableNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")).ConvertAll<object?>(x => x) : null;
                    o.IReadOnlyCollectionIntNullableNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")).ConvertAll<int?>(x => x) : null;
                    o.ICollectionObjectNullableNullableId = c.WouldResolve<object>(x => x.Id("A")) ? c.ResolveAll<object>(x => x.Id("A")).ConvertAll<object?>(x => x) : null;
                    o.ICollectionIntNullableNullableId = c.WouldResolve<int>(x => x.Id("A")) ? c.ResolveAll<int>(x => x.Id("A")).ConvertAll<int?>(x => x) : null;
                    o.Inject(
                        c.ResolveAll<object>());
                })
                .DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceLazyDependenciesExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.LazyDependencies> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.LazyDependencies> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.LazyDependencies());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.LazyDependencies> Default<T>(this Binding<T, SomeNamespace.Subnamespace.LazyDependencies> binding)
        {
            return binding.Inject(static (o, c) => 
                {
                    o.Object = new System.Lazy<object>(() => c.Resolve<object>());
                    o.NullableObject = new System.Lazy<object?>(() => c.ResolveNullable<object>());
                    o.Value = new System.Lazy<int>(() => c.Resolve<int>());
                    o.NullableValue = new System.Lazy<int?>(() => c.ResolveNullableValue<int>());
                    o.RecursiveLazy = new System.Lazy<System.Lazy<System.Lazy<int>>>(() => new System.Lazy<System.Lazy<int>>(() => new System.Lazy<int>(() => c.Resolve<int>())));
                    o.LazyList = new System.Lazy<System.Collections.Generic.List<int>>(() => c.ResolveAll<int>());
                    o.ObjectNullable = c.WouldResolve<object>() ? new System.Lazy<object>(() => c.Resolve<object>()) : null;
                    o.NullableObjectNullable = c.WouldResolve<object>() ? new System.Lazy<object?>(() => c.ResolveNullable<object>()) : null;
                    o.ValueNullable = c.WouldResolve<int>() ? new System.Lazy<int>(() => c.Resolve<int>()) : null;
                    o.NullableValueNullable = c.WouldResolve<int>() ? new System.Lazy<int?>(() => c.ResolveNullableValue<int>()) : null;
                    o.RecursiveLazyNullable = c.WouldResolve<System.Lazy<System.Lazy<int>>>() ? new System.Lazy<System.Lazy<System.Lazy<int>>>(() => new System.Lazy<System.Lazy<int>>(() => new System.Lazy<int>(() => c.Resolve<int>()))) : null;
                    o.LazyListNullable = c.WouldResolve<System.Collections.Generic.List<int>>() ? new System.Lazy<System.Collections.Generic.List<int>>(() => c.ResolveAll<int>()) : null;
                    o.Inject(
                        new System.Lazy<object>(() => c.Resolve<object>()),
                        new System.Lazy<object?>(() => c.ResolveNullable<object>()),
                        new System.Lazy<int>(() => c.Resolve<int>()),
                        new System.Lazy<int?>(() => c.ResolveNullableValue<int>()));
                })
                .DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedSomeNamespaceSubnamespaceInjectIdAttributeExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.InjectIdAttribute> FromConstructor<T>(this Binding<T, SomeNamespace.Subnamespace.InjectIdAttribute> binding)
        {
            return binding.FromMethod(static c => new SomeNamespace.Subnamespace.InjectIdAttribute());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, SomeNamespace.Subnamespace.InjectIdAttribute> Default<T>(this Binding<T, SomeNamespace.Subnamespace.InjectIdAttribute> binding)
        {
            return binding.Initialize(static (o, c) => o.Initialize())
                .Inject(static (o, c) => 
                {
                    o.HelloIdValue = c.Resolve<int>(x => x.Id("A"));
                    o.LazyInt = new System.Lazy<int>(() => c.Resolve<int>(x => x.Id("A")));
                    o.Inject(
                        c.Resolve<object>(x => x.Id("Potato")),
                        c.Resolve<float>(x => x.Id("Banana")),
                        new System.Lazy<int>(() => c.Resolve<int>(x => x.Id("P"))),
                        c.Resolve<object>());
                })
                .DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedMultipleOfEachExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, MultipleOfEach> FromConstructor<T>(this Binding<T, MultipleOfEach> binding)
        {
            return binding.FromMethod(static c => new MultipleOfEach(
                c.Resolve<object>(),
                c.Resolve<object>()));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, MultipleOfEach> Default<T>(this Binding<T, MultipleOfEach> binding)
        {
            return binding.Initialize(static (o, c) => o.Initialize())
                .Inject(static (o, c) => 
                {
                    o.Inject(
                        c.Resolve<object>());
                })
                .DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedInjectContainerExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, InjectContainer> FromConstructor<T>(this Binding<T, InjectContainer> binding)
        {
            return binding.FromMethod(static c => new InjectContainer(
                c));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, InjectContainer> Default<T>(this Binding<T, InjectContainer> binding)
        {
            return binding.DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedInjectArrayExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, InjectArray> FromConstructor<T>(this Binding<T, InjectArray> binding)
        {
            return binding.FromMethod(static c => new InjectArray(
                c.ResolveAll<object>().ToArray(),
                c.ResolveAll<object>().ToArray(),
                c.WouldResolve<object>() ? c.ResolveAll<object>().ToArray() : null,
                c.WouldResolve<object>() ? c.ResolveAll<object>().ConvertAll<object?>(x => x).ToArray() : null));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Binding<T, InjectArray> Default<T>(this Binding<T, InjectArray> binding)
        {
            return binding.DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedUnityEngineObjectExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, UnityEngine.Object> Default<T>(this Binding<T, UnityEngine.Object> binding)
        {
            return binding.DontDispose();
        }
    }
}

  
#nullable enable
using System.Runtime.CompilerServices;

namespace ManualDi.Sync
{
    public static class ManualDiGeneratedUnityEngineMonoBeheviourExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Binding<T, UnityEngine.MonoBeheviour> Default<T>(this Binding<T, UnityEngine.MonoBeheviour> binding)
        {
            return binding.Initialize(static (o, c) => o.Initialize())
                .Inject(static (o, c) => 
                {
                    o.Something = c.Resolve<object>();
                })
                .DontDispose();
        }
    }
}

]